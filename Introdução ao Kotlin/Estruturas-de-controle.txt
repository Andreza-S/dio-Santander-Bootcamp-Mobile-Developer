/** Estruturas de controle

- if/ else, when, elvis operator
- Pode ser utilizado tanto para controle quanto para atribuição
- Pode ser encadeado com multiplas estruturas


exemplos:


if(expressa) {
	//bloco de codigo
}else if (expressao2) {
	//bloco de código
}else{
	//bloco de código
}

--------------------//


when {
	case1 -> {}
	case2 -> {}
	case3 -> {}
	else -> {}

}

-------------------//

val a = Int? = null
var number = a ?: 0

//elvis operator


-------------------//



Atribuição


*if/else

- O valor atribuido tem que estar na ultima linha do bloco
- A condicional pode não usar chaves se só fizer a atribuição



val MaxValue = if (a > b) a else if (a < b) b else b

	val manValue = if (a > b) {
	println("b ($b) é o menor valor")
	b

	}else if(a < b){
		println("a($a) é o menor valor")
		a
	}else{
		println("os valore são iguais")
		b
	}
}




*when

- Equivalente ao switch de outras linguagens
- aceita tanto valores quanto condicionais
- aceita range como case


exemplos:

when {
	a > b -> {}
	a != b && a > c -> {}
	b == 0 -> {}
	else -> {}
}



when(year) {
	-4000..475 -> // Antiguidade
	476..1452 -> // Medieval
	1453..1789 -> //Moderna
	currentYear -> //ano atual


}



*Elvis Operator

- O mais proximo que a linguagem possui de um operador ternário
- Verifica se um valor é nulo e apresenta uma opção caso seja
- pode ser encadeado


exemplos:

val a:Int? = null
val c:Int? = 9
var number = a?: b?: 0   // nesse caso, se o valor de a não for nulo, number receber a. Se o valor de a for nulo e b não for nulo, number recebe b.

			Se a e b forem nulos, number receb 0.




*/

